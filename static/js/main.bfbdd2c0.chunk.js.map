{"version":3,"sources":["components/SimpleModal.js","utils/endpoints.js","components/UsersList.js","App.js","serviceWorker.js","index.js"],"names":["SimpleModal","getModalStyle","top","left","transform","this","props","classes","handleClose","handleFiledChange","updateUser","isOpen","user","Modal","aria-labelledby","aria-describedby","open","onClose","style","className","modalPaper","Typography","variant","id","TextField","value","login","onChange","error","label","textField","margin","name","type","Button","color","button","onClick","React","Component","withStyles","position","width","backgroundColor","boxShadow","textAlign","padding","outline","marginLeft","marginRight","getUsers","params","fetch","page","perPage","headers","Accept","then","response","json","UsersList","state","users","getUsersFromServer","setState","handleEditClick","handleDeleteClick","newUsers","filter","item","e","target","map","Paper","root","Table","table","TableHead","TableRow","TableCell","align","TableBody","key","component","scope","Avatar","alt","src","avatar_url","avatar","IconButton","aria-label","marginTop","overflowX","minWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bfbdd2c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = () => ({\r\n    modalPaper:  {\r\n        position: 'absolute',\r\n        width: 500,\r\n        backgroundColor: '#fff',\r\n        boxShadow: 3,\r\n        textAlign: 'center',\r\n        padding: 20,\r\n        outline: 'none',\r\n    },\r\n    textField: {\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        width: 250,\r\n    },\r\n    button: {\r\n        margin: 10,\r\n    }\r\n});\r\n\r\nclass SimpleModal extends React.Component {\r\n    getModalStyle = () => {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    };\r\n\r\n\r\n    render() {\r\n        const { classes, handleClose, handleFiledChange, updateUser, isOpen, user } = this.props;\r\n\r\n        return (\r\n            <Modal\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n                open={isOpen}\r\n                onClose={handleClose}\r\n            >\r\n                <div style={this.getModalStyle()} className={classes.modalPaper}>\r\n                    <Typography variant=\"h6\" id=\"modal-title\">\r\n                        Edit user\r\n                    </Typography>\r\n                    <TextField\r\n                        value={user.login}\r\n                        onChange={handleFiledChange}\r\n                        error={!user.login}\r\n                        id=\"login\"\r\n                        label=\"Login\"\r\n                        className={classes.textField}\r\n                        margin=\"normal\"\r\n                        name=\"login\"\r\n                    />\r\n                    <TextField\r\n                        value={user.type}\r\n                        onChange={handleFiledChange}\r\n                        id=\"login\"\r\n                        label=\"Type\"\r\n                        className={classes.textField}\r\n                        margin=\"normal\"\r\n                        name=\"type\"\r\n                    />\r\n                    <div>\r\n                        <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                onClick={updateUser}>\r\n                            Update\r\n                        </Button>\r\n                        <Button variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                onClick={handleClose}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SimpleModal)\r\n","export const getUsers = (params) => fetch(`https://api.github.com/users?page=${params.page}&per_page=${params.perPage}`, {\r\n    headers: {\r\n        Accept: 'application/json',\r\n    },\r\n}).then((response) => response.json())\r\n","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SimpleModal from \"./SimpleModal\";\r\nimport { getUsers } from \"../utils/endpoints\";\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        // width: '100%',\r\n        marginTop: 3,\r\n        padding: 40,\r\n        overflowX: 'auto',\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n    avatar: {\r\n        margin: 10,\r\n    }\r\n});\r\n\r\nclass UsersList extends React.Component {\r\n    state = {\r\n        users: [\r\n            // { id: 1, avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',\tlogin: 'mojombo' },\r\n            // { id: 2, avatar_url: 'https://avatars0.githubusercontent.com/u/2?v=4',\tlogin: 'defunkt' }\r\n        ],\r\n        user: {},\r\n        params: {\r\n            perPage: 10,\r\n            page: 1,\r\n        },\r\n        isOpen: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getUsersFromServer()\r\n    }\r\n\r\n    getUsersFromServer = () => {\r\n        getUsers(this.state.params)\r\n            .then((users) => {\r\n                this.setState({ users })\r\n            })\r\n    };\r\n\r\n    handleEditClick = (user) => {\r\n        this.setState({ isOpen: true, user })\r\n    };\r\n\r\n    handleDeleteClick = (user) => {\r\n        let newUsers = this.state.users.filter(item => item.id !== user.id);\r\n        this.setState({ users: newUsers });\r\n    };\r\n\r\n    handleClose = (user) => {\r\n        this.setState({ isOpen: false, user: {} })\r\n    };\r\n\r\n    handleFiledChange = (e) => {\r\n        let { name, value } = e.target;\r\n        this.setState({user: { ...this.state.user, [name]: value }})\r\n    };\r\n\r\n    updateUser = () => {\r\n        const { user, users } = this.state;\r\n        if (!user.login) return;\r\n        let newUsers = users.map(item => item.id === user.id ? user : item);\r\n        this.setState({ users: newUsers });\r\n        this.handleClose()\r\n    };\r\n\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { users, isOpen, user } = this.state;\r\n\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>User avatar</TableCell>\r\n                            <TableCell>Login</TableCell>\r\n                            <TableCell>Type</TableCell>\r\n                            <TableCell align=\"right\">Edit</TableCell>\r\n                            <TableCell align=\"right\">Delete</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {users.map(user => (\r\n                            <TableRow key={user.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <Avatar alt=\"Remy Sharp\" src={user.avatar_url} className={classes.avatar} />\r\n                                </TableCell>\r\n                                <TableCell>{user.login}</TableCell>\r\n                                <TableCell>{user.type}</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <IconButton aria-label=\"Delete\" onClick={() => this.handleEditClick(user)}>\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <IconButton aria-label=\"Delete\" onClick={() => this.handleDeleteClick(user)}>\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <SimpleModal\r\n                    handleClose={this.handleClose}\r\n                    handleFiledChange={this.handleFiledChange}\r\n                    updateUser={this.updateUser}\r\n                    isOpen={isOpen}\r\n                    user={user} />\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(UsersList)\r\n","import React from 'react';\nimport './App.css';\nimport UsersList from \"./components/UsersList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UsersList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}